{
  "name": "opmlparser",
  "author": {
    "name": "Dan MacTough",
    "email": "danmactough@gmail.com"
  },
  "description": "OPML parsing using sax js",
  "version": "0.4.2-alpha",
  "homepage": "http://github.com/danmactough/node-opmlparser",
  "repository": {
    "type": "git",
    "url": "git://github.com/danmactough/node-opmlparser.git"
  },
  "bugs": {
    "url": "http://github.com/danmactough/node-opmlparser/issues"
  },
  "keywords": [
    "opml",
    "feed",
    "outline",
    "xml",
    "syndication"
  ],
  "main": "./main.js",
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "sax": "0.5.x",
    "request": "2.9.x"
  },
  "devDependencies": {},
  "readme": "#  Opmlparser - OPML parsing in Node.js \n      \nThis module adds methods for OPML parsing in node.js using Isaac Schlueter's [sax](https://github.com/isaacs/sax-js) parser.\n\n## Requirements\n\n- [sax](https://github.com/isaacs/sax-js)\n- [request](https://github.com/mikeal/request)\n\n## Installation\n\n    npm install opmlparser\n\n## Example\n\n```javascript\n    var OpmlParser = require('opmlparser')\n      , parser = new OpmlParser();\n      // The following modules are used in the examples below\n      , fs = require('fs')\n      , request = require('request')\n      ;\n```\n### Use as an EventEmitter\n\n```javascript\n\n    parser.on('feed', function(feed){\n        console.log('Got feed: %s', JSON.stringify(feed));\n    });\n\n    // You can give a local file path to parseFile()\n    parser.parseFile('./opml');\n\n    // For libxml compatibility, you can also give a URL to parseFile()\n    parser.parseFile('http://hosting.opml.org/dave/spec/subscriptionList.opml');\n\n    // Or, you can give that URL to parseUrl()\n    parser.parseUrl('http://hosting.opml.org/dave/spec/subscriptionList.opml');\n\n    // But you should probably be using conditional GETs and passing the results to\n    // parseString() or piping it right into the stream, if possible\n\n    var reqObj = {'uri': 'http://hosting.opml.org/dave/spec/subscriptionList.opml',\n                  'If-Modified-Since' : <your cached 'lastModified' value>,\n                  'If-None-Match' : <your cached 'etag' value>};\n\n    // parseString()\n    request(reqObj, function (err, response, body){\n      parser.parseString(body);\n    });\n\n    // Stream piping -- very sexy\n    request(reqObj).pipe(parser.stream);\n\n    // Using the stream interface with a file (or string)\n    // A good alternative to parseFile() or parseString() when you have a large local file\n    parser.parseStream(fs.createReadStream('./opml'));\n    // Or\n    fs.createReadStream('./opml').pipe(parser.stream);\n```\n### Use with a callback\n\nWhen the OPML is finished being parsed, if you provide a callback, it gets\ncalled with four parameters: error, meta, feeds, and outline.\n\n```javascript\n\n    function myCallback (error, meta, feeds, outline){\n      if (error) console.error(error);\n      else {\n        console.log('OPML info');\n        console.log('%s - %s - %s', meta.title, meta.dateCreated, meta.ownerName);\n        console.log('Feeds');\n        feeds.forEach(function (feed){\n          console.log('%s - %s (%s)', feed.title, feed.htmlUrl, feed.xmlUrl);\n        });\n      }\n    }\n\n    parser.parseFile('./opml', myCallback);\n\n    // To use the stream interface with a callback, you *MUST* use parseStream(), not piping\n    parser.parseStream(fs.createReadStream('./opml'), myCallback);\n```\n## What is the parsed output produced by opmlparser?\n\nOpmlparser parses each OPML file into a `meta` portion, a `feeds` portion, and an\n`outline` portion.\n\nThe `meta` will be the information in the OPML's `<head>` element, plus some\nadditional metadata, such as OPML version, any namespaces defined, etc.\n\nIf the OPML is a subscription list, the `feeds` will contain an array of objects\nrepresenting each feed. If the OPML is not a subscription list, `feeds` will be\nan empty array. When opmlparser is used as an event emitter, each `feed` is\nemitted as a 'feed' event.\n\nThe `outline` will simply translate the OPML's `<body>` from XML to a Javascript\nobject (i.e., JSON), preserving the tree structure, if any.\n\n### List of meta propreties\n\nNo validation is performed. Each of the meta properties will be defined, but any\nof them may be `null`.\n\n* title\n* dateCreated\n* dateModified\n* ownerName\n* ownerId\n* docs\n* expansionState\n* vertScrollState\n* windowTop\n* windowLeft\n* windowBottom\n* windowRight\n\n### List of feed properties\n\nNo validation is performed. Any or all of the following properties may be\nabsent, and other arbitrary (and invalid) properties may be present.\n\n* title\n* text\n* xmlUrl\n* htmlUrl\n* description\n* type\n* language\n* version\n\nSee the [OPML Spec](http://dev.opml.org/spec2.html) for more info about what to\nexpect to see in various kinds of OPML files.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Dan MacTough &lt;danmactough@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "opmlparser@0.4.2-alpha",
  "dist": {
    "shasum": "525012ce46f2cbc753f2c85ae9a241d827cb5445"
  },
  "_from": "opmlparser@0.4.x",
  "_resolved": "https://registry.npmjs.org/opmlparser/-/opmlparser-0.4.2-alpha.tgz"
}
